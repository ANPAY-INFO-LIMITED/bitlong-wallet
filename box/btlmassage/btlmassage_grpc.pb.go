// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: btlmassage.proto

package btlmassagerpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BtlMassage_BackDust_FullMethodName = "/btlchannelrpc.BtlMassage/BackDust"
)

// BtlMassageClient is the client API for BtlMassage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BtlMassageClient interface {
	BackDust(ctx context.Context, in *BackDustRequest, opts ...grpc.CallOption) (*BackDustResponse, error)
}

type btlMassageClient struct {
	cc grpc.ClientConnInterface
}

func NewBtlMassageClient(cc grpc.ClientConnInterface) BtlMassageClient {
	return &btlMassageClient{cc}
}

func (c *btlMassageClient) BackDust(ctx context.Context, in *BackDustRequest, opts ...grpc.CallOption) (*BackDustResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BackDustResponse)
	err := c.cc.Invoke(ctx, BtlMassage_BackDust_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BtlMassageServer is the server API for BtlMassage service.
// All implementations should embed UnimplementedBtlMassageServer
// for forward compatibility.
type BtlMassageServer interface {
	BackDust(context.Context, *BackDustRequest) (*BackDustResponse, error)
}

// UnimplementedBtlMassageServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBtlMassageServer struct{}

func (UnimplementedBtlMassageServer) BackDust(context.Context, *BackDustRequest) (*BackDustResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackDust not implemented")
}
func (UnimplementedBtlMassageServer) testEmbeddedByValue() {}

// UnsafeBtlMassageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BtlMassageServer will
// result in compilation errors.
type UnsafeBtlMassageServer interface {
	mustEmbedUnimplementedBtlMassageServer()
}

func RegisterBtlMassageServer(s grpc.ServiceRegistrar, srv BtlMassageServer) {
	// If the following call pancis, it indicates UnimplementedBtlMassageServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BtlMassage_ServiceDesc, srv)
}

func _BtlMassage_BackDust_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackDustRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BtlMassageServer).BackDust(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BtlMassage_BackDust_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BtlMassageServer).BackDust(ctx, req.(*BackDustRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BtlMassage_ServiceDesc is the grpc.ServiceDesc for BtlMassage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BtlMassage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "btlchannelrpc.BtlMassage",
	HandlerType: (*BtlMassageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BackDust",
			Handler:    _BtlMassage_BackDust_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "btlmassage.proto",
}
