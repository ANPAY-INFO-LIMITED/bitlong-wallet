// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.9.0
// source: btlchannelrpc/btlchannel.proto

package btlchannelrpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FundBtlChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The asset amount to fund the channel with. The BTC amount is fixed and
	// cannot be customized (for now).
	AssetAmount uint64 `protobuf:"varint,1,opt,name=asset_amount,json=assetAmount,proto3" json:"asset_amount,omitempty"`
	// The asset ID to use for the channel funding.
	AssetId []byte `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// The public key of the peer to open the channel with. Must already be
	// connected to this peer.
	PeerPubkey []byte `protobuf:"bytes,3,opt,name=peer_pubkey,json=peerPubkey,proto3" json:"peer_pubkey,omitempty"`
	// The channel funding fee rate in sat/vByte.
	FeeRateSatPerVbyte uint32 `protobuf:"varint,4,opt,name=fee_rate_sat_per_vbyte,json=feeRateSatPerVbyte,proto3" json:"fee_rate_sat_per_vbyte,omitempty"`
	// The number of satoshis to give the remote side as part of the initial
	// commitment state. This is equivalent to first opening a channel and then
	// sending the remote party funds, but all done in one step. Therefore, this
	// is equivalent to a donation to the remote party, unless they reimburse
	// the funds in another way (outside the protocol).
	PushSat int64 `protobuf:"varint,5,opt,name=push_sat,json=pushSat,proto3" json:"push_sat,omitempty"`
	// The group key to use for the channel. This can be used instead of the
	// asset_id to allow assets from a fungible group to be used for the channel
	// funding instead of just assets from a single minting tranche (asset_id).
	GroupKey []byte `protobuf:"bytes,6,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	// 设置资产通道本地的聪数量
	LocalAmt uint64 `protobuf:"varint,7,opt,name=local_amt,json=localAmt,proto3" json:"local_amt,omitempty"`
}

func (x *FundBtlChannelRequest) Reset() {
	*x = FundBtlChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_btlchannelrpc_btlchannel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundBtlChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundBtlChannelRequest) ProtoMessage() {}

func (x *FundBtlChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_btlchannelrpc_btlchannel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundBtlChannelRequest.ProtoReflect.Descriptor instead.
func (*FundBtlChannelRequest) Descriptor() ([]byte, []int) {
	return file_btlchannelrpc_btlchannel_proto_rawDescGZIP(), []int{0}
}

func (x *FundBtlChannelRequest) GetAssetAmount() uint64 {
	if x != nil {
		return x.AssetAmount
	}
	return 0
}

func (x *FundBtlChannelRequest) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *FundBtlChannelRequest) GetPeerPubkey() []byte {
	if x != nil {
		return x.PeerPubkey
	}
	return nil
}

func (x *FundBtlChannelRequest) GetFeeRateSatPerVbyte() uint32 {
	if x != nil {
		return x.FeeRateSatPerVbyte
	}
	return 0
}

func (x *FundBtlChannelRequest) GetPushSat() int64 {
	if x != nil {
		return x.PushSat
	}
	return 0
}

func (x *FundBtlChannelRequest) GetGroupKey() []byte {
	if x != nil {
		return x.GroupKey
	}
	return nil
}

func (x *FundBtlChannelRequest) GetLocalAmt() uint64 {
	if x != nil {
		return x.LocalAmt
	}
	return 0
}

type FundBtlChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The channel funding transaction ID.
	Txid string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	// The index of the channel funding output in the funding transaction.
	OutputIndex int32 `protobuf:"varint,2,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
}

func (x *FundBtlChannelResponse) Reset() {
	*x = FundBtlChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_btlchannelrpc_btlchannel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundBtlChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundBtlChannelResponse) ProtoMessage() {}

func (x *FundBtlChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_btlchannelrpc_btlchannel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundBtlChannelResponse.ProtoReflect.Descriptor instead.
func (*FundBtlChannelResponse) Descriptor() ([]byte, []int) {
	return file_btlchannelrpc_btlchannel_proto_rawDescGZIP(), []int{1}
}

func (x *FundBtlChannelResponse) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *FundBtlChannelResponse) GetOutputIndex() int32 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

var File_btlchannelrpc_btlchannel_proto protoreflect.FileDescriptor

var file_btlchannelrpc_btlchannel_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x62, 0x74, 0x6c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x72, 0x70, 0x63, 0x2f,
	0x62, 0x74, 0x6c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0d, 0x62, 0x74, 0x6c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x72, 0x70, 0x63, 0x22,
	0xff, 0x01, 0x0a, 0x15, 0x46, 0x75, 0x6e, 0x64, 0x42, 0x74, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x65,
	0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x16, 0x66, 0x65, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x61, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x76, 0x62, 0x79,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x53, 0x61, 0x74, 0x50, 0x65, 0x72, 0x56, 0x62, 0x79, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x70, 0x75, 0x73, 0x68, 0x53, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x6d,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6d,
	0x74, 0x22, 0x4f, 0x0a, 0x16, 0x46, 0x75, 0x6e, 0x64, 0x42, 0x74, 0x6c, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x32, 0x6c, 0x0a, 0x0b, 0x42, 0x74, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x12, 0x5d, 0x0a, 0x0e, 0x46, 0x75, 0x6e, 0x64, 0x42, 0x74, 0x6c, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x24, 0x2e, 0x62, 0x74, 0x6c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x72, 0x70, 0x63, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x42, 0x74, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x74, 0x6c, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x42, 0x74,
	0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x74, 0x61, 0x70,
	0x72, 0x6f, 0x6f, 0x74, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x74, 0x61, 0x70, 0x72,
	0x70, 0x63, 0x2f, 0x62, 0x74, 0x6c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x72, 0x70, 0x63,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_btlchannelrpc_btlchannel_proto_rawDescOnce sync.Once
	file_btlchannelrpc_btlchannel_proto_rawDescData = file_btlchannelrpc_btlchannel_proto_rawDesc
)

func file_btlchannelrpc_btlchannel_proto_rawDescGZIP() []byte {
	file_btlchannelrpc_btlchannel_proto_rawDescOnce.Do(func() {
		file_btlchannelrpc_btlchannel_proto_rawDescData = protoimpl.X.CompressGZIP(file_btlchannelrpc_btlchannel_proto_rawDescData)
	})
	return file_btlchannelrpc_btlchannel_proto_rawDescData
}

var file_btlchannelrpc_btlchannel_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_btlchannelrpc_btlchannel_proto_goTypes = []interface{}{
	(*FundBtlChannelRequest)(nil),  // 0: btlchannelrpc.FundBtlChannelRequest
	(*FundBtlChannelResponse)(nil), // 1: btlchannelrpc.FundBtlChannelResponse
}
var file_btlchannelrpc_btlchannel_proto_depIdxs = []int32{
	0, // 0: btlchannelrpc.BtlChannels.FundBtlChannel:input_type -> btlchannelrpc.FundBtlChannelRequest
	1, // 1: btlchannelrpc.BtlChannels.FundBtlChannel:output_type -> btlchannelrpc.FundBtlChannelResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_btlchannelrpc_btlchannel_proto_init() }
func file_btlchannelrpc_btlchannel_proto_init() {
	if File_btlchannelrpc_btlchannel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_btlchannelrpc_btlchannel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundBtlChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_btlchannelrpc_btlchannel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundBtlChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_btlchannelrpc_btlchannel_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_btlchannelrpc_btlchannel_proto_goTypes,
		DependencyIndexes: file_btlchannelrpc_btlchannel_proto_depIdxs,
		MessageInfos:      file_btlchannelrpc_btlchannel_proto_msgTypes,
	}.Build()
	File_btlchannelrpc_btlchannel_proto = out.File
	file_btlchannelrpc_btlchannel_proto_rawDesc = nil
	file_btlchannelrpc_btlchannel_proto_goTypes = nil
	file_btlchannelrpc_btlchannel_proto_depIdxs = nil
}
