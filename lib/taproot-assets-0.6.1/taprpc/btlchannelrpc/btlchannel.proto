syntax = "proto3";

package btlchannelrpc;

option go_package = "github.com/lightninglabs/taproot-assets/taprpc/btlchannelrpc";

service BtlChannels {
    rpc FundBtlChannel (FundBtlChannelRequest) returns (FundBtlChannelResponse);
}

message FundBtlChannelRequest {
    // The asset amount to fund the channel with. The BTC amount is fixed and
    // cannot be customized (for now).
    uint64 asset_amount = 1;

    // The asset ID to use for the channel funding.
    bytes asset_id = 2;

    // The public key of the peer to open the channel with. Must already be
    // connected to this peer.
    bytes peer_pubkey = 3;

    // The channel funding fee rate in sat/vByte.
    uint32 fee_rate_sat_per_vbyte = 4;

    // The number of satoshis to give the remote side as part of the initial
    // commitment state. This is equivalent to first opening a channel and then
    // sending the remote party funds, but all done in one step. Therefore, this
    // is equivalent to a donation to the remote party, unless they reimburse
    // the funds in another way (outside the protocol).
    int64 push_sat = 5;

    // The group key to use for the channel. This can be used instead of the
    // asset_id to allow assets from a fungible group to be used for the channel
    // funding instead of just assets from a single minting tranche (asset_id).
    bytes group_key = 6;

    // 设置资产通道本地的聪数量
    uint64 local_amt = 7;
}

message FundBtlChannelResponse {
    // The channel funding transaction ID.
    string txid = 1;

    // The index of the channel funding output in the funding transaction.
    int32 output_index = 2;
}