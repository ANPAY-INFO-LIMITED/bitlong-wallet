// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.9.0
// source: btlchannelrpc/btlchannel.proto

package btlchannelrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BtlChannels_FundBtlChannel_FullMethodName = "/btlchannelrpc.BtlChannels/FundBtlChannel"
)

// BtlChannelsClient is the client API for BtlChannels service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BtlChannelsClient interface {
	FundBtlChannel(ctx context.Context, in *FundBtlChannelRequest, opts ...grpc.CallOption) (*FundBtlChannelResponse, error)
}

type btlChannelsClient struct {
	cc grpc.ClientConnInterface
}

func NewBtlChannelsClient(cc grpc.ClientConnInterface) BtlChannelsClient {
	return &btlChannelsClient{cc}
}

func (c *btlChannelsClient) FundBtlChannel(ctx context.Context, in *FundBtlChannelRequest, opts ...grpc.CallOption) (*FundBtlChannelResponse, error) {
	out := new(FundBtlChannelResponse)
	err := c.cc.Invoke(ctx, BtlChannels_FundBtlChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BtlChannelsServer is the server API for BtlChannels service.
// All implementations should embed UnimplementedBtlChannelsServer
// for forward compatibility
type BtlChannelsServer interface {
	FundBtlChannel(context.Context, *FundBtlChannelRequest) (*FundBtlChannelResponse, error)
}

// UnimplementedBtlChannelsServer should be embedded to have forward compatible implementations.
type UnimplementedBtlChannelsServer struct {
}

func (UnimplementedBtlChannelsServer) FundBtlChannel(context.Context, *FundBtlChannelRequest) (*FundBtlChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundBtlChannel not implemented")
}

// UnsafeBtlChannelsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BtlChannelsServer will
// result in compilation errors.
type UnsafeBtlChannelsServer interface {
	mustEmbedUnimplementedBtlChannelsServer()
}

func RegisterBtlChannelsServer(s grpc.ServiceRegistrar, srv BtlChannelsServer) {
	s.RegisterService(&BtlChannels_ServiceDesc, srv)
}

func _BtlChannels_FundBtlChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundBtlChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BtlChannelsServer).FundBtlChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BtlChannels_FundBtlChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BtlChannelsServer).FundBtlChannel(ctx, req.(*FundBtlChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BtlChannels_ServiceDesc is the grpc.ServiceDesc for BtlChannels service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BtlChannels_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "btlchannelrpc.BtlChannels",
	HandlerType: (*BtlChannelsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FundBtlChannel",
			Handler:    _BtlChannels_FundBtlChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "btlchannelrpc/btlchannel.proto",
}
