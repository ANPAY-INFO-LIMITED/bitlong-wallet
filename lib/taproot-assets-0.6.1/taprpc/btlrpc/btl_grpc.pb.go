// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: btlrpc/btl.proto

package btlrpc

import (
	context "context"
	assetwalletrpc "github.com/lightninglabs/taproot-assets/taprpc/assetwalletrpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Btl_FundVirtualPsbt2_FullMethodName     = "/btlrpc.Btl/FundVirtualPsbt2"
	Btl_GetListEligibleCoins_FullMethodName = "/btlrpc.Btl/GetListEligibleCoins"
)

// BtlClient is the client API for Btl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BtlClient interface {
	// FundVirtualPsbt2 从可用资产承诺中选择输入，为与模板匹配的虚拟交易提供资金。该接口应该在assetwalletrpc.FundVirtualPsbt基础上增加选择的硬币参数
	FundVirtualPsbt2(ctx context.Context, in *FundVirtualPsbtRequest2, opts ...grpc.CallOption) (*assetwalletrpc.FundVirtualPsbtResponse, error)
	// GetListEligibleCoins 获取可用于注资虚拟PSBT的硬币列表。该接口调用FundVirtualPsbt的FundPacket的SelectCoins的ListEligibleCoins
	GetListEligibleCoins(ctx context.Context, in *GetListEligibleCoinsRequest, opts ...grpc.CallOption) (*GetListEligibleCoinsResponse, error)
}

type btlClient struct {
	cc grpc.ClientConnInterface
}

func NewBtlClient(cc grpc.ClientConnInterface) BtlClient {
	return &btlClient{cc}
}

func (c *btlClient) FundVirtualPsbt2(ctx context.Context, in *FundVirtualPsbtRequest2, opts ...grpc.CallOption) (*assetwalletrpc.FundVirtualPsbtResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(assetwalletrpc.FundVirtualPsbtResponse)
	err := c.cc.Invoke(ctx, Btl_FundVirtualPsbt2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *btlClient) GetListEligibleCoins(ctx context.Context, in *GetListEligibleCoinsRequest, opts ...grpc.CallOption) (*GetListEligibleCoinsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListEligibleCoinsResponse)
	err := c.cc.Invoke(ctx, Btl_GetListEligibleCoins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BtlServer is the server API for Btl service.
// All implementations should embed UnimplementedBtlServer
// for forward compatibility.
type BtlServer interface {
	// FundVirtualPsbt2 从可用资产承诺中选择输入，为与模板匹配的虚拟交易提供资金。该接口应该在assetwalletrpc.FundVirtualPsbt基础上增加选择的硬币参数
	FundVirtualPsbt2(context.Context, *FundVirtualPsbtRequest2) (*assetwalletrpc.FundVirtualPsbtResponse, error)
	// GetListEligibleCoins 获取可用于注资虚拟PSBT的硬币列表。该接口调用FundVirtualPsbt的FundPacket的SelectCoins的ListEligibleCoins
	GetListEligibleCoins(context.Context, *GetListEligibleCoinsRequest) (*GetListEligibleCoinsResponse, error)
}

// UnimplementedBtlServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBtlServer struct{}

func (UnimplementedBtlServer) FundVirtualPsbt2(context.Context, *FundVirtualPsbtRequest2) (*assetwalletrpc.FundVirtualPsbtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundVirtualPsbt2 not implemented")
}
func (UnimplementedBtlServer) GetListEligibleCoins(context.Context, *GetListEligibleCoinsRequest) (*GetListEligibleCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListEligibleCoins not implemented")
}
func (UnimplementedBtlServer) testEmbeddedByValue() {}

// UnsafeBtlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BtlServer will
// result in compilation errors.
type UnsafeBtlServer interface {
	mustEmbedUnimplementedBtlServer()
}

func RegisterBtlServer(s grpc.ServiceRegistrar, srv BtlServer) {
	//// If the following call pancis, it indicates UnimplementedBtlServer was
	//// embedded by pointer and is nil.  This will cause panics if an
	//// unimplemented method is ever invoked, so we test this at initialization
	//// time to prevent it from happening at runtime later due to I/O.
	//if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
	//	t.testEmbeddedByValue()
	//}
	s.RegisterService(&Btl_ServiceDesc, srv)
}

func _Btl_FundVirtualPsbt2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundVirtualPsbtRequest2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BtlServer).FundVirtualPsbt2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Btl_FundVirtualPsbt2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BtlServer).FundVirtualPsbt2(ctx, req.(*FundVirtualPsbtRequest2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Btl_GetListEligibleCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListEligibleCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BtlServer).GetListEligibleCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Btl_GetListEligibleCoins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BtlServer).GetListEligibleCoins(ctx, req.(*GetListEligibleCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Btl_ServiceDesc is the grpc.ServiceDesc for Btl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Btl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "btlrpc.Btl",
	HandlerType: (*BtlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FundVirtualPsbt2",
			Handler:    _Btl_FundVirtualPsbt2_Handler,
		},
		{
			MethodName: "GetListEligibleCoins",
			Handler:    _Btl_GetListEligibleCoins_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "btlrpc/btl.proto",
}
