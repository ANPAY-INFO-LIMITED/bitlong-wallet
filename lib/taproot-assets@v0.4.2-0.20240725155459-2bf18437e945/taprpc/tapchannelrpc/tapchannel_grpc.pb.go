// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tapchannelrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaprootAssetChannelsClient is the client API for TaprootAssetChannels service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaprootAssetChannelsClient interface {
	// FundChannel initiates the channel funding negotiation with a peer for the
	// creation of a channel that contains a specified amount of a given asset.
	FundChannel(ctx context.Context, in *FundChannelRequest, opts ...grpc.CallOption) (*FundChannelResponse, error)
	// EncodeCustomRecords allows RPC users to encode Taproot Asset channel related
	// data into the TLV format that is used in the custom records of the lnd
	// payment or other channel related RPCs. This RPC is completely stateless and
	// does not perform any checks on the data provided, other than pure format
	// validation.
	EncodeCustomRecords(ctx context.Context, in *EncodeCustomRecordsRequest, opts ...grpc.CallOption) (*EncodeCustomRecordsResponse, error)
}

type taprootAssetChannelsClient struct {
	cc grpc.ClientConnInterface
}

func NewTaprootAssetChannelsClient(cc grpc.ClientConnInterface) TaprootAssetChannelsClient {
	return &taprootAssetChannelsClient{cc}
}

func (c *taprootAssetChannelsClient) FundChannel(ctx context.Context, in *FundChannelRequest, opts ...grpc.CallOption) (*FundChannelResponse, error) {
	out := new(FundChannelResponse)
	err := c.cc.Invoke(ctx, "/tapchannelrpc.TaprootAssetChannels/FundChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taprootAssetChannelsClient) EncodeCustomRecords(ctx context.Context, in *EncodeCustomRecordsRequest, opts ...grpc.CallOption) (*EncodeCustomRecordsResponse, error) {
	out := new(EncodeCustomRecordsResponse)
	err := c.cc.Invoke(ctx, "/tapchannelrpc.TaprootAssetChannels/EncodeCustomRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaprootAssetChannelsServer is the server API for TaprootAssetChannels service.
// All implementations must embed UnimplementedTaprootAssetChannelsServer
// for forward compatibility
type TaprootAssetChannelsServer interface {
	// FundChannel initiates the channel funding negotiation with a peer for the
	// creation of a channel that contains a specified amount of a given asset.
	FundChannel(context.Context, *FundChannelRequest) (*FundChannelResponse, error)
	// EncodeCustomRecords allows RPC users to encode Taproot Asset channel related
	// data into the TLV format that is used in the custom records of the lnd
	// payment or other channel related RPCs. This RPC is completely stateless and
	// does not perform any checks on the data provided, other than pure format
	// validation.
	EncodeCustomRecords(context.Context, *EncodeCustomRecordsRequest) (*EncodeCustomRecordsResponse, error)
	mustEmbedUnimplementedTaprootAssetChannelsServer()
}

// UnimplementedTaprootAssetChannelsServer must be embedded to have forward compatible implementations.
type UnimplementedTaprootAssetChannelsServer struct {
}

func (UnimplementedTaprootAssetChannelsServer) FundChannel(context.Context, *FundChannelRequest) (*FundChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundChannel not implemented")
}
func (UnimplementedTaprootAssetChannelsServer) EncodeCustomRecords(context.Context, *EncodeCustomRecordsRequest) (*EncodeCustomRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncodeCustomRecords not implemented")
}
func (UnimplementedTaprootAssetChannelsServer) mustEmbedUnimplementedTaprootAssetChannelsServer() {}

// UnsafeTaprootAssetChannelsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaprootAssetChannelsServer will
// result in compilation errors.
type UnsafeTaprootAssetChannelsServer interface {
	mustEmbedUnimplementedTaprootAssetChannelsServer()
}

func RegisterTaprootAssetChannelsServer(s grpc.ServiceRegistrar, srv TaprootAssetChannelsServer) {
	s.RegisterService(&TaprootAssetChannels_ServiceDesc, srv)
}

func _TaprootAssetChannels_FundChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaprootAssetChannelsServer).FundChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapchannelrpc.TaprootAssetChannels/FundChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaprootAssetChannelsServer).FundChannel(ctx, req.(*FundChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaprootAssetChannels_EncodeCustomRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncodeCustomRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaprootAssetChannelsServer).EncodeCustomRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapchannelrpc.TaprootAssetChannels/EncodeCustomRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaprootAssetChannelsServer).EncodeCustomRecords(ctx, req.(*EncodeCustomRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaprootAssetChannels_ServiceDesc is the grpc.ServiceDesc for TaprootAssetChannels service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaprootAssetChannels_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tapchannelrpc.TaprootAssetChannels",
	HandlerType: (*TaprootAssetChannelsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FundChannel",
			Handler:    _TaprootAssetChannels_FundChannel_Handler,
		},
		{
			MethodName: "EncodeCustomRecords",
			Handler:    _TaprootAssetChannels_EncodeCustomRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tapchannelrpc/tapchannel.proto",
}
